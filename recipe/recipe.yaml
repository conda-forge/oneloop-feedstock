context:
  name: "oneloop"
  version: "3.7.2"

recipe:
  # Have top level name be unique from any outputs
  # c.f. https://github.com/conda-forge/conda-forge.github.io/blob/abfc33db28c35e9a8f6b719d0021768f0d5d06be/docs/maintainer/knowledge_base.md?plain=1#L1749
  name: ${{ name }}-split
  version: ${{ version }}

source:
  url: https://bitbucket.org/hameren/${{ name }}/get/v${{ version }}.zip
  sha256: fa36c0716ab0526cb98693094b7efa2219434bed9f59429f123b654a33309848

build:
  number: 5
  skip: win

outputs:
  - package:
      name: ${{ name }}

    build:
      script:
        - sed -i "s|FC = gfortran|FC = $FC|g" Config
        - sed -i "s|FFLAGS = -O|FFLAGS = $FFLAGS|g" Config
        # Disable quad precision on systems that don't support libquadmath
        - if: (linux and aarch64) or osx
          then: sed -i "/QPKIND/d" Config
        - echo -e "\n# Config file"
        - cat Config
        # Get .dylib extension for macOS
        - if: osx
          then: sed -i "s|libavh_olo.so|libavh_olo${SHLIB_EXT}|g" create.py
        # FIXME: Link in libgfortran for arm64 macOS
        - if: osx and arm64
          then: sed -i "s|fc,'-shared',|fc,'-shared','-L$PREFIX/lib','-lgfortran',|g" create.py
        - python create.py dynamic
        - mkdir -p $PREFIX/include/oneloop
        - mv *.mod $PREFIX/include/oneloop/
        - mv libavh_olo${SHLIB_EXT} $PREFIX/lib/
        - ./clean.sh

    requirements:
      run_exports:
        - ${{ pin_subpackage('oneloop', upper_bound='x.x') }}
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('fortran') }}
        - sed
        # Add lower bound to avoid creating builds for each Python version conda-forge
        # supports, as Python is used only to run a script.
        - python >=3.6

    tests:
      - package_contents:
          strict: true
          files:
              # FIXME: These seem unnecessary, and unclear why they exist
              - etc/conda/test-files/oneloop/*
          include:
            exists:
              - oneloop/avh_olo_version.mod
              - oneloop/avh_olo_units.mod
              - oneloop/avh_olo_dp_kinds.mod
              - oneloop/avh_olo_dp_arrays.mod
              - oneloop/avh_olo_dp_prec.mod
              - oneloop/avh_olo_dp_print.mod
              - oneloop/avh_olo_dp_auxfun.mod
              - oneloop/avh_olo_dp_olog.mod
              - oneloop/avh_olo_dp_dilog.mod
              - oneloop/avh_olo_dp_bnlog.mod
              - oneloop/avh_olo_dp_qmplx.mod
              - oneloop/avh_olo_dp_bub.mod
              - oneloop/avh_olo_dp_tri.mod
              - oneloop/avh_olo_dp_box.mod
              - oneloop/avh_olo_dp_boxc.mod
              - if: not ((linux and aarch64) or osx)
                then:
                  - oneloop/avh_olo_qp_kinds.mod
                  - oneloop/avh_olo_qp_arrays.mod
                  - oneloop/avh_olo_qp_prec.mod
                  - oneloop/avh_olo_qp_print.mod
                  - oneloop/avh_olo_qp_auxfun.mod
                  - oneloop/avh_olo_qp_olog.mod
                  - oneloop/avh_olo_qp_dilog.mod
                  - oneloop/avh_olo_qp_bnlog.mod
                  - oneloop/avh_olo_qp_qmplx.mod
                  - oneloop/avh_olo_qp_bub.mod
                  - oneloop/avh_olo_qp_tri.mod
                  - oneloop/avh_olo_qp_box.mod
                  - oneloop/avh_olo_qp_boxc.mod
                  - oneloop/avh_olo_qp.mod
              - oneloop/avh_olo_dp.mod
              - oneloop/avh_olo.mod
            not_exists:
              - if: (linux and aarch64) or osx
                then:
                  - oneloop/avh_olo_qp_kinds.mod
                  - oneloop/avh_olo_qp_arrays.mod
                  - oneloop/avh_olo_qp_prec.mod
                  - oneloop/avh_olo_qp_print.mod
                  - oneloop/avh_olo_qp_auxfun.mod
                  - oneloop/avh_olo_qp_olog.mod
                  - oneloop/avh_olo_qp_dilog.mod
                  - oneloop/avh_olo_qp_bnlog.mod
                  - oneloop/avh_olo_qp_qmplx.mod
                  - oneloop/avh_olo_qp_bub.mod
                  - oneloop/avh_olo_qp_tri.mod
                  - oneloop/avh_olo_qp_box.mod
                  - oneloop/avh_olo_qp_boxc.mod
                  - oneloop/avh_olo_qp.mod
          lib:
            exists:
              - avh_olo
            not_exists:
              - libavh_olo.a

      - script:
          - cd example
          - export WITHLT=no
          - export LTVSNge26=yes
          - export WITHCOLI=no

          - ../src/avh_pc_exe.py "case" "LT" "${WITHLT}" example.f
          - ../src/avh_pc_exe.py "case" "LTVSNge26" "${WITHLT}${LTVSNge26}" example.f
          - ../src/avh_pc_exe.py "case" "COLI" "${WITHCOLI}" example.f

          - if: not ((linux and aarch64) or osx)
            then:
              - ../src/avh_pc_exe.py "case" "LT" "${WITHLT}" example16.f
              - ../src/avh_pc_exe.py "case" "LTVSNge26" "${WITHLT}${LTVSNge26}" example16.f
              - ../src/avh_pc_exe.py "case" "COLI" "${WITHCOLI}" example16.f
          - unset WITHLT
          - unset LTVSNge26
          - unset WITHCOLI
          # Use $LDFLAGS for more generic solution to -L$PREFIX/lib
          - $FC $FFLAGS example.f -o example -I$PREFIX/include/oneloop $LDFLAGS -lavh_olo
          - ./example < input

          - if: not ((linux and aarch64) or osx)
            then:
              - $FC $FFLAGS example16.f -o example16 -I$PREFIX/include/oneloop $LDFLAGS -lavh_olo
              - ./example16 < input

          - cd ..
          - cd example_cpp
          - env
          - $CXX example.cpp -o example_cpp $CXXFLAGS -I. $LDFLAGS -lavh_olo -lgfortran
          - ./example_cpp

        files:
          source:
            - src/
            - example/
            - example_cpp/
        requirements:
          run:
            - ${{ compiler('fortran') }}
            - ${{ compiler('cxx') }}
            - python

  - package:
      name: ${{ name }}-static

    build:
      script:
        - sed -i "s|FC = gfortran|FC = $FC|g" Config
        - sed -i "s|FFLAGS = -O|FFLAGS = $FFLAGS|g" Config
        # Disable quad precision on systems that don't support libquadmath
        - if: (linux and aarch64) or osx
          then: sed -i "/QPKIND/d" Config
        - echo -e "\n# Config file"
        - cat Config
        - python create.py
        - mkdir -p $PREFIX/include/oneloop
        - mv *.mod $PREFIX/include/oneloop/
        - mv libavh_olo.a $PREFIX/lib/
        - ./clean.sh

    requirements:
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('fortran') }}
        - sed
        # Add lower bound to avoid creating builds for each Python version conda-forge
        # supports, as Python is used only to run a script.
        - python >=3.6

    tests:
      - package_contents:
          strict: true
          files:
              - lib/libavh_olo.a
              # FIXME: These seem unnecessary, and unclear why they exist
              - etc/conda/test-files/oneloop-static/*
          include:
            exists:
              - oneloop/avh_olo_version.mod
              - oneloop/avh_olo_units.mod
              - oneloop/avh_olo_dp_kinds.mod
              - oneloop/avh_olo_dp_arrays.mod
              - oneloop/avh_olo_dp_prec.mod
              - oneloop/avh_olo_dp_print.mod
              - oneloop/avh_olo_dp_auxfun.mod
              - oneloop/avh_olo_dp_olog.mod
              - oneloop/avh_olo_dp_dilog.mod
              - oneloop/avh_olo_dp_bnlog.mod
              - oneloop/avh_olo_dp_qmplx.mod
              - oneloop/avh_olo_dp_bub.mod
              - oneloop/avh_olo_dp_tri.mod
              - oneloop/avh_olo_dp_box.mod
              - oneloop/avh_olo_dp_boxc.mod
              - if: not ((linux and aarch64) or osx)
                then:
                  - oneloop/avh_olo_qp_kinds.mod
                  - oneloop/avh_olo_qp_arrays.mod
                  - oneloop/avh_olo_qp_prec.mod
                  - oneloop/avh_olo_qp_print.mod
                  - oneloop/avh_olo_qp_auxfun.mod
                  - oneloop/avh_olo_qp_olog.mod
                  - oneloop/avh_olo_qp_dilog.mod
                  - oneloop/avh_olo_qp_bnlog.mod
                  - oneloop/avh_olo_qp_qmplx.mod
                  - oneloop/avh_olo_qp_bub.mod
                  - oneloop/avh_olo_qp_tri.mod
                  - oneloop/avh_olo_qp_box.mod
                  - oneloop/avh_olo_qp_boxc.mod
                  - oneloop/avh_olo_qp.mod
              - oneloop/avh_olo_dp.mod
              - oneloop/avh_olo.mod
            not_exists:
              - if: (linux and aarch64) or osx
                then:
                  - oneloop/avh_olo_qp_kinds.mod
                  - oneloop/avh_olo_qp_arrays.mod
                  - oneloop/avh_olo_qp_prec.mod
                  - oneloop/avh_olo_qp_print.mod
                  - oneloop/avh_olo_qp_auxfun.mod
                  - oneloop/avh_olo_qp_olog.mod
                  - oneloop/avh_olo_qp_dilog.mod
                  - oneloop/avh_olo_qp_bnlog.mod
                  - oneloop/avh_olo_qp_qmplx.mod
                  - oneloop/avh_olo_qp_bub.mod
                  - oneloop/avh_olo_qp_tri.mod
                  - oneloop/avh_olo_qp_box.mod
                  - oneloop/avh_olo_qp_boxc.mod
                  - oneloop/avh_olo_qp.mod
          lib:
            not_exists:
              - avh_olo

      - script:
          - cd example
          - export WITHLT=no
          - export LTVSNge26=yes
          - export WITHCOLI=no

          - ../src/avh_pc_exe.py "case" "LT" "${WITHLT}" example.f
          - ../src/avh_pc_exe.py "case" "LTVSNge26" "${WITHLT}${LTVSNge26}" example.f
          - ../src/avh_pc_exe.py "case" "COLI" "${WITHCOLI}" example.f

          - if: not ((linux and aarch64) or osx)
            then:
              - ../src/avh_pc_exe.py "case" "LT" "${WITHLT}" example16.f
              - ../src/avh_pc_exe.py "case" "LTVSNge26" "${WITHLT}${LTVSNge26}" example16.f
              - ../src/avh_pc_exe.py "case" "COLI" "${WITHCOLI}" example16.f
          - unset WITHLT
          - unset LTVSNge26
          - unset WITHCOLI
          # Use $LDFLAGS for more generic solution to -L$PREFIX/lib
          - $FC $FFLAGS example.f -o example -I$PREFIX/include/oneloop $LDFLAGS -lavh_olo
          - ./example < input

          - if: not ((linux and aarch64) or osx)
            then:
              - $FC $FFLAGS example16.f -o example16 -I$PREFIX/include/oneloop $LDFLAGS -lavh_olo
              - ./example16 < input

          - cd ..
          - cd example_cpp
          - env
          - if: ((linux and aarch64) or osx)
            then: $CXX example.cpp -o example_cpp $CXXFLAGS -I. $LDFLAGS -lavh_olo -lgfortran
            else: $CXX example.cpp -o example_cpp $CXXFLAGS -I. $LDFLAGS -lavh_olo -lgfortran -lquadmath
          - ./example_cpp

        files:
          source:
            - src/
            - example/
            - example_cpp/
        requirements:
          run:
            - ${{ compiler('fortran') }}
            - ${{ compiler('cxx') }}
            - python

about:
  homepage: https://bitbucket.org/hameren/oneloop/
  summary: 'OneLOop: A library of one-loop scalar functions'
  description: |
    OneLOop is a program to evaluate the one-loop scalar 1-point, 2-point,
    3-point and 4-point functions, for all kinematical configurations relevant
    for collider-physics, and for any non-positive imaginary parts of the
    internal squared masses. It deals with all UV and IR divergences within
    dimensional regularization. Furthermore, it provides routines to evaluate
    these functions using straightforward numerical integration.

    OneLOop is authored by Andreas van Hameren.
  license: GPL-3.0-only
  license_family: GPL
  license_file: COPYING
  documentation: https://helac-phegas.web.cern.ch/OneLOop.html
  repository: https://bitbucket.org/hameren/oneloop/

extra:
  feedstock-name: oneloop
  recipe-maintainers:
    - matthewfeickert
